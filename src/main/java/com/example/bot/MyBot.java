package com.example.bot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.time.Duration;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class MyBot extends TelegramLongPollingBot {
    private final String botToken;
    private Long chatIdForNotifications;

    public MyBot(String botToken) {
        this.botToken = botToken;
    }

    @Override
    public String getBotUsername() {
        return "MyVacationBot"; // –∏–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            switch (text) {
                case "/start@VacationTimeBot", "/start" -> {
                    chatIdForNotifications = chatId;
                    ChatIdStorage.saveChatId(chatId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

                    sendText(chatId,
                            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ç—Å—á—ë—Ç –¥–æ –Ω–∞—à–µ–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–π –ø–æ–µ–∑–¥–∫–∏ –≤ –¢–∞–π–ª–∞–Ω–¥ üå¥‚òÄÔ∏è\n\n" +
                                    "üìå –ö–æ–º–∞–Ω–¥—ã:\n" +
                                    "‚Ä¢ /start ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n" +
                                    "‚Ä¢ /timeleft ‚Äî —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤—ã–ª–µ—Ç–∞ ‚úàÔ∏è"
                    );
                }
                case "/timeleft@VacationTimeBot", "/timeleft" -> sendText(chatId, getTimeLeft());
            }
        }
    }

    public void sendText(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String getTimeLeft() {
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC+4"));
        ZonedDateTime flightTime = ZonedDateTime.of(
                2025, 10, 26, 23, 55, 0, 0,
                ZoneId.of("UTC+3")
        );

        Duration duration = Duration.between(now, flightTime);
        if (duration.isNegative()) {
            return "‚úàÔ∏èüèñ –û—Ç–ø—É—Å–∫ —É–∂–µ –Ω–∞—á–∞–ª—Å—è ü•≥";
        }

        long days = duration.toDays();
        long hours = duration.toHoursPart();
        long minutes = duration.toMinutesPart();

        return String.format(
                "üå¥‚òÄÔ∏è –î–æ –≤—ã–ª–µ—Ç–∞ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å:\n\n" +
                        "üìÖ %d –¥–Ω " +
                        "‚è≥ %d —áac " +
                        "üïí %d –º–∏–Ω",
                days, hours, minutes
        ).replace("-", "\\-"); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –º–∏–Ω—É—Å –¥–ª—è MarkdownV2
    }

    public Long getChatIdForNotifications() {
        return chatIdForNotifications;
    }
}